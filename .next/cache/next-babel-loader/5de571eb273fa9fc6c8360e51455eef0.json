{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_ALL_FAILURE, GET_ALL_SUCCESS, PUT_FAILURE, PUT_SUCCESS } from \"../actions/request\";\nexport var REQUEST_STATUS = {\n  LOADING: \"loading\",\n  SUCCESS: \"success\",\n  ERROR: \"error\"\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case GET_ALL_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        records: action.records,\n        status: REQUEST_STATUS.SUCCESS\n      });\n\n    case GET_ALL_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: REQUEST_STATUS.ERROR,\n        error: action.error\n      });\n\n    case PUT_SUCCESS:\n      var records = state.records;\n      var record = action.record;\n      var recordIndex = records.map(function (rec) {\n        return rec.id;\n      }).indexOf(record.id);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        records: [].concat(_toConsumableArray(records.slice(0, recordIndex)), [record], _toConsumableArray(records.slice(recordIndex + 1)))\n      });\n\n    case PUT_FAILURE:\n      console.log('PUT_FAILURE: Currently just loggin to console without refreshing records');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/_Projects/designing-react-components/src/reducers/request.js"],"names":["GET_ALL_FAILURE","GET_ALL_SUCCESS","PUT_FAILURE","PUT_SUCCESS","REQUEST_STATUS","LOADING","SUCCESS","ERROR","reducer","state","action","type","records","status","error","record","recordIndex","map","rec","id","indexOf","slice","console","log"],"mappings":";;;;;;;AAAA,SAAQA,eAAR,EAAyBC,eAAzB,EAA0CC,WAA1C,EAAuDC,WAAvD,QAAyE,oBAAzE;AAEA,OAAO,IAAMC,cAAc,GAAG;AAC1BC,EAAAA,OAAO,EAAE,SADiB;AAE1BC,EAAAA,OAAO,EAAE,SAFiB;AAG1BC,EAAAA,KAAK,EAAE;AAHmB,CAAvB;;AAMP,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,eAAL;AACI,6CACOQ,KADP;AAEIG,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFpB;AAGIC,QAAAA,MAAM,EAAET,cAAc,CAACE;AAH3B;;AAKJ,SAAKN,eAAL;AACI,6CACOS,KADP;AAEII,QAAAA,MAAM,EAAET,cAAc,CAACG,KAF3B;AAGIO,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAHlB;;AAKJ,SAAKX,WAAL;AAAA,UACYS,OADZ,GACwBH,KADxB,CACYG,OADZ;AAAA,UAEYG,MAFZ,GAEuBL,MAFvB,CAEYK,MAFZ;AAGI,UAAMC,WAAW,GAAGJ,OAAO,CAACK,GAAR,CAAY,UAACC,GAAD;AAAA,eAASA,GAAG,CAACC,EAAb;AAAA,OAAZ,EAA6BC,OAA7B,CAAqCL,MAAM,CAACI,EAA5C,CAApB;AACA,6CACOV,KADP;AAEIG,QAAAA,OAAO,+BACAA,OAAO,CAACS,KAAR,CAAc,CAAd,EAAiBL,WAAjB,CADA,IAEHD,MAFG,sBAGAH,OAAO,CAACS,KAAR,CAAcL,WAAW,GAAG,CAA5B,CAHA;AAFX;;AAQJ,SAAKd,WAAL;AACIoB,MAAAA,OAAO,CAACC,GAAR,CACI,0EADJ;AAGA,6CACOd,KADP;AAEIK,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAFlB;;AAIJ;AACI,aAAOL,KAAP;AAlCR;AAqCH,CAtCD;;AAwCA,eAAeD,OAAf","sourcesContent":["import {GET_ALL_FAILURE, GET_ALL_SUCCESS, PUT_FAILURE, PUT_SUCCESS} from \"../actions/request\";\r\n\r\nexport const REQUEST_STATUS = {\r\n    LOADING: \"loading\",\r\n    SUCCESS: \"success\",\r\n    ERROR: \"error\"\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case GET_ALL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                records: action.records,\r\n                status: REQUEST_STATUS.SUCCESS\r\n            };\r\n        case GET_ALL_FAILURE:\r\n            return {\r\n                ...state,\r\n                status: REQUEST_STATUS.ERROR,\r\n                error: action.error\r\n            }\r\n        case PUT_SUCCESS:\r\n            const { records } = state;\r\n            const { record } = action;\r\n            const recordIndex = records.map((rec) => rec.id).indexOf(record.id);\r\n            return {\r\n                ...state,\r\n                records: [\r\n                    ...records.slice(0, recordIndex),\r\n                    record,\r\n                    ...records.slice(recordIndex + 1)\r\n                ]\r\n            };\r\n        case PUT_FAILURE:\r\n            console.log(\r\n                'PUT_FAILURE: Currently just loggin to console without refreshing records'\r\n            );\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}