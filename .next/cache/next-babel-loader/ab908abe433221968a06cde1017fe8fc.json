{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_ALL_SUCCESS, PUT_SUCCESS } from \"../actions/request\";\nexport const REQUEST_STATUS = {\n  LOADING: \"loading\",\n  SUCCESS: \"success\",\n  ERROR: \"error\"\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case GET_ALL_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: REQUEST_STATUS.SUCCESS,\n        speakers: action.data\n      });\n\n    case PUT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: action.status\n      });\n\n    case \"FETCH_ERROR\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: REQUEST_STATUS.ERROR,\n        error: action.error\n      });\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/_Projects/designing-react-components/src/reducers/request.js"],"names":["GET_ALL_SUCCESS","PUT_SUCCESS","REQUEST_STATUS","LOADING","SUCCESS","ERROR","reducer","state","action","type","status","speakers","data","error"],"mappings":";;;;;;AAAA,SAAQA,eAAR,EAAyBC,WAAzB,QAA2C,oBAA3C;AAEA,OAAO,MAAMC,cAAc,GAAG;AAC1BC,EAAAA,OAAO,EAAE,SADiB;AAE1BC,EAAAA,OAAO,EAAE,SAFiB;AAG1BC,EAAAA,KAAK,EAAE;AAHmB,CAAvB;;AAMP,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,eAAL;AACI,6CACOO,KADP;AAEIG,QAAAA,MAAM,EAAER,cAAc,CAACE,OAF3B;AAGIO,QAAAA,QAAQ,EAAEH,MAAM,CAACI;AAHrB;;AAKJ,SAAKX,WAAL;AACI,6CACOM,KADP;AAEIG,QAAAA,MAAM,EAAEF,MAAM,CAACE;AAFnB;;AAIJ,SAAK,aAAL;AACI,6CACOH,KADP;AAEIG,QAAAA,MAAM,EAAER,cAAc,CAACG,KAF3B;AAGIQ,QAAAA,KAAK,EAAEL,MAAM,CAACK;AAHlB;AAbR;AAoBH,CArBD;;AAuBA,eAAeP,OAAf","sourcesContent":["import {GET_ALL_SUCCESS, PUT_SUCCESS} from \"../actions/request\";\r\n\r\nexport const REQUEST_STATUS = {\r\n    LOADING: \"loading\",\r\n    SUCCESS: \"success\",\r\n    ERROR: \"error\"\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case GET_ALL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                status: REQUEST_STATUS.SUCCESS,\r\n                speakers: action.data\r\n            };\r\n        case PUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"FETCH_ERROR\":\r\n            return {\r\n                ...state,\r\n                status: REQUEST_STATUS.ERROR,\r\n                error: action.error\r\n            }\r\n\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}